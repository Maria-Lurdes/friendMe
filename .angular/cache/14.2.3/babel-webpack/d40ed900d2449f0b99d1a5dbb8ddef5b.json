{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { createUserWithEmailAndPassword, FacebookAuthProvider, getAuth, GoogleAuthProvider, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword, signInWithPopup, updateProfile } from \"firebase/auth\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./alert.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./auth.constants\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(alert, http, router, constants) {\n      this.alert = alert;\n      this.http = http;\n      this.router = router;\n      this.constants = constants;\n      this.googleProvider = new GoogleAuthProvider();\n      this.facebookProvider = new FacebookAuthProvider();\n      this.auth = getAuth();\n      this.favouritesPetsList = new Subject();\n    }\n\n    get token() {\n      const expDate = new Date(localStorage.getItem(\"fb-token-exp\"));\n\n      if (new Date() > expDate) {\n        this.signOut();\n        return null;\n      }\n\n      return localStorage.getItem(\"fb-token\");\n    }\n\n    getFavourites() {\n      onAuthStateChanged(this.auth, user => {\n        if (user) {\n          let userSettings = JSON.parse(localStorage.getItem(user.uid));\n\n          if (userSettings) {\n            this.favouritesPetsList.next(userSettings);\n          } else {\n            this.favouritesPetsList.next([]);\n          }\n        }\n      });\n    }\n\n    googleSignIn() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield signInWithPopup(this.auth, this.googleProvider);\n          this.setGoogleFacebookToken();\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    facebookSignIn() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield signInWithPopup(this.auth, this.facebookProvider);\n          this.setGoogleFacebookToken();\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    signUpUser(email, password, displayName) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield createUserWithEmailAndPassword(this.auth, email, password);\n          yield updateProfile(this.auth.currentUser, {\n            displayName\n          });\n          yield this.setTokenAndNavigate();\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    updateUserProfile(updatedUser) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield updateProfile(this.auth.currentUser, updatedUser);\n          const idToken = yield this.auth.currentUser.getIdToken();\n          this.setToken(idToken);\n          this.alert.success(\"Your profile is successfully updated.\");\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    sendPasswordResetEmail(email) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let userEmail = email ? email : this.auth.currentUser.email;\n\n        try {\n          yield sendPasswordResetEmail(this.auth, userEmail);\n          this.alert.success(\"Check your email to reset your password.\");\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    signIn(user) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          yield signInWithEmailAndPassword(this.auth, user.email, user.password);\n          yield this.setTokenAndNavigate();\n\n          if (this.auth.currentUser.email === this.constants.ADMIN_EMAIL) {\n            localStorage.setItem(\"role\", \"admin\");\n          } else {\n            localStorage.setItem(\"role\", \"user\");\n          }\n        } catch (error) {\n          this.handleAuthError(error.code);\n        }\n      });\n    }\n\n    setTokenAndNavigate() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const idToken = yield this.auth.currentUser.getIdToken();\n        this.setToken(idToken);\n        this.router.navigate([\"/pets-dashboard\"]);\n      });\n    }\n\n    signOut() {\n      this.setToken(null);\n    }\n\n    isAuthenticated() {\n      return !!this.token;\n    }\n\n    setToken(response) {\n      if (response) {\n        const expDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"fb-token\", response);\n        localStorage.setItem(\"fb-token-exp\", expDate.toString());\n      } else {\n        localStorage.removeItem(\"fb-token\");\n        localStorage.removeItem(\"fb-token-exp\");\n      }\n    }\n\n    setGoogleFacebookToken() {\n      this.auth.currentUser.getIdTokenResult().then(result => {\n        const expDate = new Date(new Date().getTime() + 3600 * 1000);\n        localStorage.setItem(\"fb-token\", result.token);\n        localStorage.setItem(\"fb-token-exp\", expDate.toString());\n        this.router.navigate([\"/pets-dashboard\"]);\n      });\n    }\n\n    handleAuthError(errorCode) {\n      switch (errorCode) {\n        case \"auth/email-already-exists\":\n          this.alert.danger(\"The provided email is already in use by an existing user. Each user must have a unique email.\");\n          break;\n\n        case \"auth/email-already-in-use\":\n          this.alert.danger(\"The provided email is already in use by an existing user. Each user must have a unique email.\");\n          break;\n\n        case \"auth/invalid-email\":\n          this.alert.danger(\"The provided value for the email user property is invalid. It must be a string email address.\");\n          break;\n\n        case \"auth/invalid-password\":\n          this.alert.danger(\"The provided value for the password user property is invalid. It must be a string with at least six characters.\");\n          break;\n\n        case \"auth/uid-already-exists\":\n          this.alert.danger(\"The provided uid is already in use by an existing user. Each user must have a unique uid.\");\n          break;\n\n        case \"auth/network-request-failed\":\n          this.alert.danger(\"There is problem with your network.\");\n          break;\n\n        case \"auth/wrong-password\":\n          this.alert.danger(\"Wrong password.\");\n          break;\n\n        case \"auth/user-not-found\":\n          this.alert.danger(\"User by this email not found.\");\n          break;\n\n        default:\n          this.alert.danger(\"Smth went wrong, try again later.\");\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AlertService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthConstants));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}