{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\nimport { map } from \"rxjs/operators\";\nimport { getDownloadURL, getStorage, listAll, ref } from \"firebase/storage\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    constructor(http) {\n      this.http = http;\n      this.petPostsArray = new Subject();\n    }\n\n    createPost(post) {\n      return this.http.post(`${environment.fvDbUrl}/posts.json`, post).pipe(map(response => {\n        return Object.assign(Object.assign({}, post), {\n          id: response.name\n        });\n      }));\n    }\n\n    getAll() {\n      return this.http.get(`${environment.fvDbUrl}/posts.json`).pipe(map(response => {\n        return Object.keys(response).map(key => Object.assign(Object.assign({}, response[key]), {\n          id: key\n        }));\n      })).subscribe(data => {\n        this.getImageUrl(data);\n      }, () => {\n        this.petPostsArray.next([]);\n      });\n    }\n\n    getImageUrl(data) {\n      let posts = [...data];\n      let fireStorage = getStorage();\n      const listRef = ref(fireStorage, `pets-avatars`);\n      listAll(listRef).then(res => {\n        res.items.forEach(itemRef => {\n          getDownloadURL(itemRef).then(url => {\n            let index = posts.findIndex(post => post.id === itemRef.name);\n            posts[index].avatar = url;\n          }).finally(() => {\n            this.petPostsArray.next(posts);\n          });\n        });\n      });\n    }\n\n    getById(id) {\n      return this.http.get(`${environment.fvDbUrl}/posts/${id}.json`).pipe(map(post => {\n        return Object.assign(Object.assign({}, post), {\n          id\n        });\n      }));\n    }\n\n    remove(id) {\n      return this.http.delete(`${environment.fvDbUrl}/posts/${id}.json`);\n    }\n\n    updatePost(id, post) {\n      return this.http.patch(`${environment.fvDbUrl}/posts/${id}.json`, post);\n    }\n\n    saveContactForm(contact) {\n      return this.http.post(`${environment.fvDbUrl}/contacts.json`, contact);\n    }\n\n    getRandomFact() {\n      return this.http.get(`https://meowfacts.herokuapp.com/`);\n    }\n\n  }\n\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}